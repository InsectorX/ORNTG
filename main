import networkx as nx
import matplotlib.pyplot as plt
import fnss as fn
import numpy as np
import random
from random import randrange
from networkx.utils import py_random_state

def add_and_remove_edges(G, p_new_connection, p_remove_connection):
    
    '''for each node,
      add a new connection to random other node, with prob p_new_connection,
      remove a connection, with prob p_remove_connection - operates on G in-place'''
    
   
    new_edges = []
    rem_edges = []

    for node in G.nodes():
        # find the other nodes this one is connected to
        connected = [to for (fr, to) in G.edges(node)]
        # and find the remainder of nodes, which are candidates for new edges
        unconnected = [n for n in G.nodes() if not n in connected]

        # probabilistically add a random edge
        if len(unconnected): # only try if new edge is possible
            if random.random() < p_new_connection:
                new = random.choice(unconnected)
               
                G.add_edge(node, new)
                print ("\tnew edge:\t {} -- {}".format(node, new))
                new_edges.append( (node, new) )
                # book-keeping, in case both add and remove done in same cycle
                unconnected.remove(new)
                connected.append(new)

        # probabilistically remove a random edge
        if len(connected): # only try if an edge exists to remove
            if random.random() < p_remove_connection:
                remove = random.choice(connected)
                G.remove_edge(node, remove)
                print ("\tedge removed:\t {} -- {}".format(node, remove))
                rem_edges.append( (node, remove) )
                # book-keeping, in case lists are important later?
                connected.remove(remove)
                unconnected.append(remove)
    return rem_edges, new_edges

p_new_connection = 0.02
p_remove_connection = 0

star = random.randint(3,6)
tree = random.randint(1,10)

nodes = int(input("Number of nodes = "))

K = {}
for x in range (0,round(nodes*0.01581)):
  K[x]=fn.star_topology(star)

J = {}
for y in range (0,round(nodes*0.003)):
  J[y]=nx.balanced_tree(tree, 1)
  nx.selfloops = False
  

G1 = fn.glp_topology(nodes, 1, 10, 0.548, 0.80) 
G2 = nx.from_dict_of_lists(K)
G3 = nx.from_dict_of_lists(J)

list1 = [G1,G2,G3]
G = nx.compose_all(list1)
rem_edges, new_edges = add_and_remove_edges(G, p_new_connection, p_remove_connection)
G.remove_edges_from(nx.selfloop_edges(G))


nx.draw(G, node_color='red', with_labels=False, arrowsize=1, node_size=20)
plt.show()

#print the Nodes and the number of edges
print("Nodes and the number of edges")
print("____________________________")
print("Node\tNumber of Edges")
for v in nx.nodes(G):
  print('%s\t%d' % (v, nx.degree(G, v)))

#Print edgelist 
print("_____________")
print("Edgelist")
print("_____________")
for line in nx.generate_edgelist(G,delimiter='\t', data = False):
  print(line)

degrees = dict(G.degree())
degree_values = sorted(set (degrees.values()))
histogram = [list(degrees.values ()).count (i)/float(nx.number_of_nodes (G)) for i in degree_values]
plt.figure()
plt.plot(degree_values, histogram, 'o')
plt.title('Degree Distribution graph') 
plt.xlabel('Degree')
plt.ylabel('Fraction of Nodes')
plt.xscale('log')
plt.yscale('log')

def plot_degree_hist(G, title):
 """Plot histogram of node degrees."""
 plt.hist(dict(nx.degree(G)).values(), bins=range(1, 11))
 # Label axes
 plt.xlabel('Degree')
 plt.ylabel('Count')
 plt.title(title)
           
plt.figure(figsize=(7.5, 3.75))
ax = plt.subplot(1,2,1)
plot_degree_hist(G, 'Nodes')
for spine in ax.spines.values():
 spine.set_visible(True)
